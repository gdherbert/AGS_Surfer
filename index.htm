<!DOCTYPE html>
<html lang="en">
	<head>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta charset="utf-8">
		<title>AGS Scraper</title>
		<meta name="generator" content="Bootply" />
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<link href="bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">

		<link href="css/styles.css" rel="stylesheet">
    <link href='bower_components/bootstrap-treeview/dist/bootstrap-treeview.min.css' rel='stylesheet'>
	</head>
	<body>

<div class="container">
<h1>ArcGIS Server Meta Surfer</h1>


<legend>Enter REST endpoint URL</legend>

<!-- Prepended text-->
<div class="form-group">
    <div class="col-md-8">
        <div class="input-group">
            <span class="input-group-addon">AGS URL</span>
            <input id="txtURL" value='http://gis.oregonmetro.gov/arcgis/rest/services/' class="form-control" placeholder="http://phat.servers.rule/ArcGIS/rest/services/" type="text">
        </div>
    </div>
</div>

<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<div class='row'>
    <div class='md-col-12'>
        <div id='tree'></div>
    </div>
</div>

	<!-- script references -->
		<script src="bower_components/jquery/dist/jquery.min.js"></script>
		<script src="bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="bower_components/bootstrap-treeview/dist/bootstrap-treeview.min.js"></script>

    <script>

    var root_url = "";
    var tree = [];

    $('#txtURL').on('keydown', function(e){
      var code = e.keyCode || e.which;
       if(code == 13) { 
          tree=[];
          if(validateURL($(this).val())){

            root_url = $(this).val();
            //do we have a foraward slash at the end of it?
            if(root_url.charAt(root_url.length-1)!='/'){
              root_url += '/';
            }

            if(root_url.indexOf("?f=json") != -1){
              root_url = root_url.replace('?f=json','');
            }

            $.getJSON(root_url+'?f=json').then(function(data){
              //at the root we have a list of folders and services

              var root_defs= [];

              root_defs.push(processFolders(data.folders));
              
              root_defs.push(processServices(data.services));

              $.when.apply(null, root_defs).done(function() {
                $('#tree').treeview({
                  data: tree,  
                  levels: 1
                });
              });
            });
          }else{
            //for the root
            //change the form to red n stuff

          }
       }
    });

    function processFolders(folders){

      var def = $.Deferred();

      var deferreds = [];

      $.each(folders, function(i,v){

        var promise = function(){
          var nested_deferred = $.Deferred();

          $.getJSON(root_url+v+'/?f=json').then(function(data){
            var froot_defs= [];
            froot_defs.push(processFolders(data.folders));
            froot_defs.push(processServices(data.services));

            $.when.apply(null, froot_defs).done(function() {
              nested_deferred.resolve();
            });
          });

          return nested_deferred.promise();
        }();

        promise.done(function(){});

        deferreds.push(promise);

      });

      $.when.apply(null, deferreds).done(function() {
         def.resolve();
      });

      return def.promise();
    }

    function processServices(services){

      var def = $.Deferred();

      var deferreds = [];

      $.each(services, function(i, v) {
        if (v.type == 'MapServer') {
          deferreds.push(
            $.getJSON(root_url + v.name + '/' + v.type + '/?f=json', function(data) {
              serviceHelper(v, data, root_url + v.name + '/' + v.type+'/');
            })
          );
        }
      });

      $.when.apply(null, deferreds).done(function() {
          def.resolve();
      });

      return def.promise();
    }

    function serviceHelper(v, data, url){
       //tree.push({text:'root', nodes:[]}
        var cat = {text:v.name, nodes:[]};

        $.each(data.layers, function(_i,_v){

          if(_v.subLayerIds!=null){
            var group = {text:_v.name, nodes:[]};
          
            $.each(_v.subLayerIds, function(__i,__v){
              group.nodes.push({text:data.layers[__v].name, url:url, layer:__v});
            });
            cat.nodes.push(group);
          }

          if(_v.parentLayerId==-1 && _v.subLayerIds==null){
            cat.nodes.push({text:_v.name, layer:_i, url: url});
          }
        });

        tree.push(cat);
    }


 function validateURL(value){
      return false || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
    }
    </script>

	</body>
</html>